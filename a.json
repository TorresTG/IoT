[
        {
            "curso": {
                "nombre": "matematicas",
                "grado": 5,
                "seccion": "A",
                "salon": "salon 17",
                "descripcion": "se ensean formulas basicas"
            },
            "estudiantes": [
                {
                    "nombre": "pepo",
                    "edad": 5,
                    "telefono": "871674998",
                    "email": "pepe123@gmail.com",
                    "estado": "muerto"
                },
                {
                    "nombre": "juan",
                    "edad": 7,
                    "telefono": "871677777",
                    "email": "saul@gmail.com",
                    "estado": "vivo"
                },
                {
                    "nombre": "dante",
                    "edad": 9,
                    "telefono": "8714563345",
                    "email": "dante@gmail.com",
                    "estado": "muerto"
                }
            ]
        },
  {
    "curso": {
      "nombre": "manualidades",
      "grado": 9,
      "seccion": "T",
      "salon": "salon 100",
      "descripcion": "se ense\u00f1a a usar la mano"
    },
    "estudiantes": [
      {
        "nombre": "Ana",
        "edad": 29,
        "telefono": "6666666666",
        "email": "anamaseter@gmail.com",
        "estado": "ascendiendo a dios"
      }
    ]
  },
  {
    "curso": {
      "nombre": "manualidades",
      "grado": 9,
      "seccion": "T",
      "salon": "salon 100",
      "descripcion": "se ense\u00f1a a usar la mano"
    },
    "estudiantes": [
      {
        "nombre": "Ana",
        "edad": 29,
        "telefono": "6666666666",
        "email": "anamaseter@gmail.com",
        "estado": "ascendiendo a dios"
      }
    ]
  }
],

    [
        {
            "curso": {
                "nombre": "matematicas",
                "grado": 5,
                "seccion": "A",
                "salon": "salon 17",
                "descripcion": "se ense\u00f1an formulas basicas"
            },
            "estudiantes": [
                {
                    "nombre": "pepo",
                    "edad": 5,
                    "telefono": "871674998",
                    "email": "pepe123@gmail.com",
                    "estado": "muerto"
                },
                {
                    "nombre": "juan",
                    "edad": 7,
                    "telefono": "871677777",
                    "email": "saul@gmail.com",
                    "estado": "vivo"
                }
            ]
        },
        {
            "curso": {
                "nombre": "manualidades",
                "grado": 9,
                "seccion": "T",
                "salon": "salon 100",
                "descripcion": "se ense\u00f1a a usar la mano"
            },
            "estudiantes": [
                {
                    "nombre": "Ana",
                    "edad": 29,
                    "telefono": "6666666666",
                    "email": "anamaseter@gmail.com",
                    "estado": "ascendiendo a dios"
                }
            ]
        }
    ]

#metodo funcional para imprimir un json
    lista_inscripciones = json.loads(datos_json)

    # Crear el objeto principal para almacenar las inscripciones
    superInscri = Inscrito()

    # Procesar inscripciones en un solo ciclo
    for inscripcion in lista_inscripciones:
        curso = Curso(**inscripcion["curso"])  # Crear objeto Curso con kwargs
        inscrito = Inscrito(curso)

        #cosa que se podria agregar: inscrito = Inscrito(Curso.interpretar_Curso(lista_inscripciones))
        # Agregar estudiantes al inscrito
        estudiantes = [Estudiante(**est) for est in inscripcion["estudiantes"]]
        for estudiante in estudiantes:
            inscrito.estudiantes.agregar_a_Lista(estudiante)

        # Agregar inscripci√≥n a la lista principal
        superInscri.agregar_a_Lista(inscrito)

    # Mostrar el resultado
    print(superInscri)



ESTO OTRO TAMBIEN PODRIA SERVIR:

 @staticmethod
    def interpretar_inscritos(self, item, identificador):
        if identificador:
            return Inscrito(Curso.interpretar_Curso(item))
        else:
            return [Estudiante.interpretar_Estudiante(item)]