[
        {
            "curso": {
                "nombre": "matematicas",
                "grado": 5,
                "seccion": "A",
                "salon": "salon 17",
                "descripcion": "se ensean formulas basicas"
            },
            "estudiantes": [
                {
                    "nombre": "pepo",
                    "edad": 5,
                    "telefono": "871674998",
                    "email": "pepe123@gmail.com",
                    "estado": "muerto"
                },
                {
                    "nombre": "juan",
                    "edad": 7,
                    "telefono": "871677777",
                    "email": "saul@gmail.com",
                    "estado": "vivo"
                },
                {
                    "nombre": "dante",
                    "edad": 9,
                    "telefono": "8714563345",
                    "email": "dante@gmail.com",
                    "estado": "muerto"
                }
            ]
        },
  {
    "curso": {
      "nombre": "manualidades",
      "grado": 9,
      "seccion": "T",
      "salon": "salon 100",
      "descripcion": "se ense\u00f1a a usar la mano"
    },
    "estudiantes": [
      {
        "nombre": "Ana",
        "edad": 29,
        "telefono": "6666666666",
        "email": "anamaseter@gmail.com",
        "estado": "ascendiendo a dios"
      }
    ]
  },
  {
    "curso": {
      "nombre": "manualidades",
      "grado": 9,
      "seccion": "T",
      "salon": "salon 100",
      "descripcion": "se ense\u00f1a a usar la mano"
    },
    "estudiantes": [
      {
        "nombre": "Ana",
        "edad": 29,
        "telefono": "6666666666",
        "email": "anamaseter@gmail.com",
        "estado": "ascendiendo a dios"
      }
    ]
  }
],

    [
        {
            "curso": {
                "nombre": "matematicas",
                "grado": 5,
                "seccion": "A",
                "salon": "salon 17",
                "descripcion": "se ense\u00f1an formulas basicas"
            },
            "estudiantes": [
                {
                    "nombre": "pepo",
                    "edad": 5,
                    "telefono": "871674998",
                    "email": "pepe123@gmail.com",
                    "estado": "muerto"
                },
                {
                    "nombre": "juan",
                    "edad": 7,
                    "telefono": "871677777",
                    "email": "saul@gmail.com",
                    "estado": "vivo"
                }
            ]
        },
        {
            "curso": {
                "nombre": "manualidades",
                "grado": 9,
                "seccion": "T",
                "salon": "salon 100",
                "descripcion": "se ense\u00f1a a usar la mano"
            },
            "estudiantes": [
                {
                    "nombre": "Ana",
                    "edad": 29,
                    "telefono": "6666666666",
                    "email": "anamaseter@gmail.com",
                    "estado": "ascendiendo a dios"
                }
            ]
        }
    ]

#metodo funcional para imprimir un json
    lista_inscripciones = json.loads(datos_json)

    # Crear el objeto principal para almacenar las inscripciones
    superInscri = Inscrito()

    # Procesar inscripciones en un solo ciclo
    for inscripcion in lista_inscripciones:
        curso = Curso(**inscripcion["curso"])  # Crear objeto Curso con kwargs
        inscrito = Inscrito(curso)

        #cosa que se podria agregar: inscrito = Inscrito(Curso.interpretar_Curso(lista_inscripciones))
        # Agregar estudiantes al inscrito
        estudiantes = [Estudiante(**est) for est in inscripcion["estudiantes"]]
        for estudiante in estudiantes:
            inscrito.estudiantes.agregar_a_Lista(estudiante)

        # Agregar inscripci√≥n a la lista principal
        superInscri.agregar_a_Lista(inscrito)

    # Mostrar el resultado
    print(superInscri)



ESTO OTRO TAMBIEN PODRIA SERVIR:

 @staticmethod
    def interpretar_inscritos(self, item, identificador):
        if identificador:
            return Inscrito(Curso.interpretar_Curso(item))
        else:
            return [Estudiante.interpretar_Estudiante(item)]


guardar:
    def jsonObject(self):
        documents_path = os.path.expanduser("~/Documents")
        base_name = "inscrito"
        extension = ".json"
        counter = 1
        file_path = os.path.join(documents_path, f"{base_name}{extension}")


        while os.path.exists(file_path):
            file_path = os.path.join(documents_path, f"{base_name}_{counter}{extension}")
            counter += 1

 with open(file_path, "w") as file:
        file.write(str(superInscri))

    print(f"Archivo guardado en: {file_path}")






counter = 1
        file_path = "/Users/torres/Documents/inscrito.json"

        with open(file_path, "w") as file:
            file.write(str(Clase_a_guardar))
        print(f"El archivo se guardara en: {file_path}")
        return file_path



#esto por alguna razon funciona, averiguar por que?
    def __str__(self):
        datos = {}

        datos["curso"] = self.curso.__dict__
        datos["inscritos"] = [
            item.__dict__ if hasattr(item, "__dict__") else item
            for item in self.estudiantes.lista_clases
        ]

        if hasattr(self, "lista_clases"):
            datos["lista_clases"] = [
                # Se convierte cada elemento a cadena; se invoca su propio __str__
                str(item) for item in self.lista_clases
            ]

        return json.dumps(datos, indent=4, ensure_ascii=False)


    def __str__(self):
        datos = {}

        # Procesar el curso para limpiar las claves
        curso_dict = {}
        for key, value in self.curso.__dict__.items():
            # Eliminar el prefijo '_Curso__' de las claves
            clean_key = key.replace('_Curso__', '')
            curso_dict[clean_key] = value
        datos["curso"] = curso_dict

        # Procesar la lista de estudiantes
        estudiantes_list = []
        for item in self.estudiantes.lista_clases:
            if hasattr(item, "__dict__"):
                estudiante_dict = {}
                for k, v in item.__dict__.items():
                    # Eliminar el prefijo '_Estudiante__' de las claves
                    clean_k = k.replace('_Estudiante__', '')
                    estudiante_dict[clean_k] = v
                estudiantes_list.append(estudiante_dict)
            else:
                estudiantes_list.append(item)
        datos["estudiantes"] = estudiantes_list  # Cambiar clave a "estudiantes"